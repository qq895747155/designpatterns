单一职责原则：

        就一个类而言，应该仅有一个引起它变化的原因

        如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者
    抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到
    意想不到的破坏。

        软件设计真正要做的许多内容，就是发现职责并把职责互相分离，如果多于一个动机去改变
    一个类，那么这个类就具有多于一个的职责，就要考虑类的职责分离。

 ---------------------------------------------------------------------------------------------

开闭原则：

        是说软件实体(类，模块，方法等等)应该可以扩展，但是不可修改。

        对于扩展是开放的，对于修改是封闭的。面对需要，对程序的改动是增加代码，而不是
    修改现有代码。

        面对需求分析，把可能会变化的部分抽象分离。

----------------------------------------------------------------------------------------

依赖倒置原则：

        抽象不应该依赖于细节，细节应该依赖于抽象。就是说要针对接口编程，而不是对实现编程。

        编程时，不管高层模块或者是低层模块，都依赖于抽象(接口或者抽象类),只要接口是稳定的，
    那么任何一个更改都不用担心其他受影响，就使得高层模块或者是低层模块很容易被复用。

------------------------------------------------------------------------------------------

里氏替换原则：

        子类型必须能够替换掉他们的父类型。如果使用的是一个父类的话，那么一定适用于
    它的子类，而且察觉不出父类对象和子类对象的区别。也就是说父类替换成它的子类，程序
    的行为不变。

        只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正的被复用，
    而子类也能够在父类的基础上增加新的行为。

------------------------------------------------------------------------------------------

迪米特法则：

        如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个
    类需要调用另外一个类的某一个方法的话，可以通过第三者转发这个调用。

    注意：这样就会出现很多的转发类，或者叫中转类。

        在类的结构设计上，尽量降低成员的访问权限，也就是说包装为private状态，这也就是封装
    的特性。

        迪米特法则最根本的特性就是要降低类之间的耦合，不过现在都是面向接口编程(依赖倒置),
    因此也可以降低耦合。

-------------------------------------------------------------------------------------

合成/聚合复用原则：

      聚合：聚合表示一种弱的‘拥有’关系，体现的是A对象可以包含B对象，
                但B对象不是A对象的一部分。

      合成：合成则是一种强的‘拥有关系’, 体现了严格的部分和整体的关系,
                部分和整体的生命周期一样。

      使用合成/聚合原则的好处是：优先使用对象的合成/聚合将有助于你保持每个类被封装，
            并集中在单个任务上，这样类和类继承层次会保持较小规模。



